#include "T3TaskScheduling.hpp"


namespace task
{
T3TaskScheduling::T3TaskScheduling()
{
    _beTasking = false;
}

T3TaskScheduling* T3TaskScheduling::_taskScheduling = new T3TaskScheduling();

T3TaskScheduling* T3TaskScheduling::getInstance()
{

  _taskScheduling->initTaskScheduing();
  return _taskScheduling;
}

T3TaskScheduling::~T3TaskScheduling()
{

}

int T3TaskScheduling::initTaskScheduing()
{
  _taskDB = interface::T3TaskDatabase::getInstance();
  connect(_taskDB,
          &interface::T3TaskDatabase::newTask,
          this,
          &T3TaskScheduling::getNewTask);
  _task = T3Task::getInstance();
  connect(_task,
          &T3Task::taskFinish,
          this,
          &T3TaskScheduling::taskFinish);
  startTaskScheduling();

}

void T3TaskScheduling::getNewTask(model::T3TaskModel task)
{
  if(task.getType() > model::eTHardware && task.getType() <= model::eTShowUI)
  {
    switch (task.getPriority())
    {
    case 0:
       _taskListZero.append(task);
      break;
    case 1:
      _taskListFirst.append(task);
      break;
    case 2:
      _taskListSecond.append(task);
      break;
    case 3:
      _taskListThird.append(task);
      break;
    default:
      T3LOG << "not support the task priority";
      break;
    }
    if(!_beTasking)
    {
      taskFinish();
    }
    return ;
  }
  if(task.getType() < model::eTHardware)
  {
    _task->runTask(task);
  }
}

int T3TaskScheduling::startTaskScheduling()
{

    model::T3SignTask sign_;
    _task->runTask(sign_);
    model::T3StandbyTask standby_;
    _task->runTask(standby_);

}

void T3TaskScheduling::taskFinish()
{

    _beTasking = true;
    if(_taskListZero.length() > 0)
    {
      runStak(_taskListZero.at(0));
      _taskListZero.removeFirst();
      return ;
    }
    if(_taskListFirst.length() > 0)
    {
      //_task->runTask((model::T3TaskModel)_taskListFirst.at(0));
      _taskListFirst.removeFirst();
      return ;
    }
    if(_taskListSecond.length() > 0)
    {
      //_task->runTask((model::T3TaskModel)_taskListSecond.at(0));
      _taskListSecond.removeFirst();
      return ;
    }
    if(_taskListThird.length() > 0)
    {
      //_task->runTask((model::T3TaskModel)_taskListThird.at(0));
      _taskListThird.removeFirst();
      return ;
    }

    _beTasking = false;
    model::T3TaskModel standby_(eTStandby);
    _task->runTask(standby_);
    model::T3TaskModel origin_(eTOrigin);
    _task->runTask(origin_);
}

int T3TaskScheduling::runStak(T3TaskModel taskModel)
{
  model::eTaskType state_ = taskModel.getType();
//  switch (state_) {
//  case eTGuide:
//      T3GuideTaskDB taskDB_;
//      //model::T3GuideTask guideTask_;
//      taskDB_.getGuideTaskModelByTask(taskModel,
//                                      guideTask_);
//      _task->runTask(guideTask_);
//    break;
//  case eTExpress:
//      T3ExpressTaskDB expressDB_;
//      model::T3ExpressTask expressTask_;
//      expressDB_.getExpressTaskByTask(taskModel,expressTask_);
//      _task->runTask(expressTask_);
//    break;
//  default:
//    break;
//  }
}

}

